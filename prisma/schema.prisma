// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Users roles 
enum Role {
  ADMIN
  SALES
  PAYMENT
  CLIENT
}

//Car type 
enum CarModelType {
  SEDAN
  HATCHBACK
  SUV
  TRUCK
  VAN
  COUPE
  CONVERTIBLE
  WAGON
  SPORTS
  HYBRID
}

//Car transmission
enum Transmission {
  AUTO
  MANUAL
}

//Car drive type 
enum DriveType {
  FRONT_WHEEL
  REAR_WHEEL
  ALL_WHEEL
}

//Engine type 
enum EngineType {
  PETROL
  GAS
  DIESEL
  ELECTRIC
  HYBRID
}

//Payment method
enum PaymentMethod {
  CASH
  ONLINE
  INSTALLMENT
}

//Sale status
enum PaymentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum PickupStatus {
  PENDING // Car not yet ready for pickup
  READY // Car ready for pickup
  PICKED_UP // Client has picked up the car
  CANCELLED // Pickup was cancelled for some reason
}

//Installment status
enum InstallmentStatus {
  PENDING
  PAID
  OVERDUE
}

//Plan status :
enum PlanStatus {
  IN_PROGRESS
  COMPLETED
}

//Payment type :
enum PaymentType {
  DOWNPAYMENT
  INSTALLMENT_PAYMENT
  FULL_PAYMENT
}

//User model
model User {
  id         String   @id @default(cuid())
  firstName  String
  lastName   String
  email      String   @unique
  phone      String
  password   String
  role       Role     @default(CLIENT)
  isVerified Boolean  @default(false)
  sales      Sale[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([email, id])
}

//Car Model model
model CarModel {
  //initialize
  id           String       @id @default(cuid())
  model        String
  year         Int
  type         CarModelType
  //second step
  engine       Engine[]
  //third step
  transmission Transmission
  driveType    DriveType
  colors       String[]     @default([])
  features     String[]     @default([])
  seats        Int?
  doors        Int?
  maxSpeed     Int?
  price        Int
  discount     Int
  availability Boolean      @default(false)
  infoComplete Boolean      @default(false) // to check if the car model is complete or not
  //last step
  mainImage    String?
  images       String[]     @default([])
  sales        Sale[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([year, type])
}

//Engine model
model Engine {
  id         String     @id @default(cuid())
  type       EngineType
  capacity   Int
  horsepower Int
  carModelId String
  carModel   CarModel   @relation(fields: [carModelId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([carModelId])
}

model Sale {
  id            String            @id @default(cuid())
  carModelId    String
  userId        String
  carModel      CarModel          @relation(fields: [carModelId], references: [id])
  user          User              @relation(fields: [userId], references: [id])
  carColor      String
  salePrice     Decimal           @db.Decimal(10, 2)
  saleDate      String // YYYY-MM-DD
  paymentMethod PaymentMethod // Renamed from paymentType for clarity
  paymentStatus PaymentStatus     @default(PENDING)
  pickupStatus  PickupStatus      @default(PENDING)
  payments      Payment[]
  plan          InstallmentPlan[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([carModelId, userId])
  @@index([paymentStatus])
}

model Payment {
  id            String        @id @default(cuid())
  saleId        String
  sale          Sale          @relation(fields: [saleId], references: [id])
  paymentDate   String // YYYY-MM-DD 
  paymentAmount Decimal       @db.Decimal(10, 2)
  paymentType   PaymentType
  transactionId String?
  installment   Installment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model InstallmentPlan {
  id                    String        @id @default(cuid())
  saleId                String //FK
  installmentsNumber    Int
  remainingInstallments Int
  installmentValue      Decimal       @db.Decimal(10, 2)
  status                PlanStatus    @default(IN_PROGRESS)
  installments          Installment[]
  sale                  Sale          @relation(fields: [saleId], references: [id])
  interestRate          Decimal       @default(0) @db.Decimal(5, 2) // Added field
  downPayment           Decimal       @default(0) @db.Decimal(10, 2) // Added field
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@index([saleId])
  @@index([status])
}

model Installment {
  id        String            @id @default(cuid())
  planId    String
  plan      InstallmentPlan   @relation(fields: [planId], references: [id]) //will change it later to installment plan
  dueDate   String // YYYY-MM-DD
  amount    Decimal           @db.Decimal(10, 2) // Added amount field
  paymentId String?
  status    InstallmentStatus @default(PENDING)
  payment   Payment?          @relation(fields: [paymentId], references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([planId])
  @@index([status])
}

//Inquiry model 
model Inquiry {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  answered  Boolean  @default(false)
  message   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetPassword {
  id        String   @id @default(cuid())
  userId    String
  isValid   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

